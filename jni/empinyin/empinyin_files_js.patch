diff --git a/jni/empinyin/empinyin_files.js b/jni/empinyin/empinyin_files.js
index b252cf1..b3a4c0a 100644
--- a/jni/empinyin/empinyin_files.js
+++ b/jni/empinyin/empinyin_files.js
@@ -3,12 +3,12 @@
 
   if (typeof Module == 'undefined') Module = {};
   if (!Module['preRun']) Module['preRun'] = [];
-  Module["preRun"].push(function() {
+  Module['preRun'].push(function() {
+    function assert(check, msg) {
+      if (!check) throw msg + new Error().stack;
+    }
 
-function assert(check, msg) {
-  if (!check) throw msg + new Error().stack;
-}
-Module['FS_createPath']('/', 'data', true, true);
+    Module['FS_createPath']('/', 'data', true, true);
 
     function DataRequest() {}
     DataRequest.prototype = {
@@ -18,19 +18,20 @@ Module['FS_createPath']('/', 'data', true, true);
       },
       send: function() {}
     };
-  
     var filePreload0 = new DataRequest();
     filePreload0.open('GET', 'data/dict.data', true);
     filePreload0.responseType = 'arraybuffer';
     filePreload0.onload = function() {
       var arrayBuffer = filePreload0.response;
       assert(arrayBuffer, 'Loading file data/dict.data failed.');
-      var byteArray = !arrayBuffer.subarray ? new Uint8Array(arrayBuffer) : arrayBuffer;
-      
-      Module['FS_createPreloadedFile']('/data', 'dict.data', byteArray, true, true, function() {
-        Module['removeRunDependency']('fp data/dict.data');
+      var byteArray = !arrayBuffer.subarray ?
+        new Uint8Array(arrayBuffer) : arrayBuffer;
 
-      });
+      Module['FS_createPreloadedFile'](
+        '/data', 'dict.data', byteArray, true, true, function() {
+          Module['removeRunDependency']('fp data/dict.data');
+        }
+      );
     };
     Module['addRunDependency']('fp data/dict.data');
     filePreload0.send(null);
@@ -41,11 +42,19 @@ Module['FS_createPath']('/', 'data', true, true);
     }
     Module.expectedDataFileDownloads++;
 
-    var PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
+    var PACKAGE_PATH = window['encodeURIComponent'](
+      window.location.pathname.toString().substring(
+        0, window.location.pathname.toString().lastIndexOf('/')
+      ) + '/'
+    );
+
     var PACKAGE_NAME = 'empinyin_files.data';
-    var REMOTE_PACKAGE_NAME = 'empinyin_files.data';
+    var REMOTE_PACKAGE_NAME =
+    (Module['empinyin_files_path'] ? Module['empinyin_files_path'] + '/' : '') +
+      'empinyin_files.data';
+
     var PACKAGE_UUID = '64577897-299a-4825-b6d2-4b93c3b6972d';
-  
+
     function fetchRemotePackage(packageName, callback, errback) {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', packageName, true);
@@ -72,8 +81,10 @@ Module['FS_createPath']('/', 'data', true, true);
             loaded += data.loaded;
             num++;
           }
-          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
-          Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
+          total = Math.ceil(total * Module.expectedDataFileDownloads / num);
+          Module['setStatus'](
+            'Downloading data... (' + loaded + '/' + total + ')'
+          );
         } else if (!Module.dataFileDownloads) {
           Module['setStatus']('Downloading data...');
         }
@@ -90,7 +101,7 @@ Module['FS_createPath']('/', 'data', true, true);
       assert(arrayBuffer, 'Loading data file failed.');
       var byteArray = new Uint8Array(arrayBuffer);
       var curr;
-      
+
         curr = DataRequest.prototype.requests['data/dict.data'];
         var data = byteArray.subarray(0, 1068442);
         var ptr = Module['_malloc'](1068442);
@@ -105,10 +116,10 @@ Module['FS_createPath']('/', 'data', true, true);
     function handleError(error) {
       console.error('package error:', error);
     };
-  
+
     if (!Module.preloadResults)
       Module.preloadResults = {};
-  
+
       Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
       fetchRemotePackage(REMOTE_PACKAGE_NAME, processPackageData, handleError);
       });
